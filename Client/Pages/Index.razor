@page "/"

@using SpellGenerator.Client.Data
@inject DataTemplateService DataTemplateService

<h1>Procedural Spell Generator</h1>
<br>

<EditForm EditContext="@EditContext">

    <div class="form-group">
        <label for="body">Spell type </label>

        <InputSelect @bind-Value="@inputs.EffectType">

            @foreach (var etype in GetSpellTypeOptions())
            {
                <option value="@etype">@etype</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="body">School </label>

        <InputSelect @bind-Value="@inputs.SchoolOfMagic">

            @foreach (var school in Enum.GetValues(typeof(SchoolOfMagic)))
            {
                <option value="@school">@school</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="body">Power Level </label>

        <InputSelect @bind-Value="@inputs.PowerLevel">

            @foreach (var option in Enum.GetValues(typeof(PowerLevel)))
            {
                <option value="@option">@option</option>
            }
        </InputSelect>
    </div>
</EditForm>

<br>
<button @onclick="GenerateSpell">Create a new spell</button>
<br>
<br>
<br>
@if (theSpell != null)
{
    <div class="grid-container">

        <div class="grid-item col1" >Name</div>
        <div class="grid-item col2">@theSpell.Name</div>

        <div class="grid-item col1">School</div>
        <div class="grid-item col2">@theSpell.School</div>

        <div class="grid-item col1">Spell Level</div>
        <div class="grid-item col2">@theSpell.GetSpellLevelSummary()</div>

        <div class="grid-item col1">Type</div>
        <div class="grid-item col2">@theSpell.Effect.Type</div>

        <div class="grid-item col1">Components</div>
        <div class="grid-item col2">@theSpell.Components.SummarizeIncludingSpecificMaterials()</div>

        <div class="grid-item col1">Cast Time</div>
        <div class="grid-item col2">@theSpell.CastTime</div>

        @if (theSpell.Effect.Duration != Duration.Instant)
        {
            <div class="grid-item col1" td>Duration</div>
            <div class="grid-item col2">@theSpell.Effect.Duration</div>

            <div class="grid-item col1">Concentration</div>
            <div class="grid-item col2">@theSpell.RequiresConcentration</div>
        }

        <div class="grid-item col1">Ritual</div>
        <div class="grid-item col2">@theSpell.Ritual</div>

        <div class="grid-item col1">Delivery</div>
        <div class="grid-item col2">@theSpell.Delivery.Description</div>

        @if (theSpell.Aesthetic != null)
        {
            <div class="grid-item col1">Aesthetic</div>
            <div class="grid-item col2">@theSpell.Aesthetic.CombinedDescription()</div>
        }

        @if(theSpell.Effect is DamageEffect damageEffect)
        {
            <div class="grid-item col1">Accuracy</div>
            <div class="grid-item col2">@damageEffect.AttackOrSaveDescription()</div>
        }
        else if (theSpell.Effect is DebuffEffect debuffEffect)
        {
            <div class="grid-item col1">Accuracy</div>
            <div class="grid-item col2">@debuffEffect.AttackOrSaveDescription()</div>
        }

        <div class="grid-item col1">Effect</div>
        <div class="grid-item col2">@theSpell.Effect.Description</div>
        
        @if (theSpell.CasterPenaltyCost != null)
        {
            <div class="grid-item col1">Side effect</div>
            <div class="grid-item col2">@theSpell.CasterPenaltyCost.Description</div>
        }

        <div class="grid-item col1">Power Rating</div>
        <div class="grid-item col2">@theSpell.GetFinalPowerRating()</div>
    </div>
}

@code {
    private EditContext EditContext;
    private GeneratorEngine.Spell? theSpell;
    private InputsForSpell inputs = new InputsForSpell{ PowerLevel = PowerLevel.Random };

    protected override void OnInitialized()
    {
        EditContext = new EditContext(inputs);
        base.OnInitialized();
    }

    private void GenerateSpell()
    {
        bool typeExists = Enum.TryParse(inputs.EffectType, out EffectType spellType);
        EffectType? inputType = null;
        if (typeExists) inputType = spellType;

        theSpell = GeneratorEngine.Generators.SpellGenerator.CreateSpell(DataTemplateService, inputs.SchoolOfMagic, inputType, inputs.PowerLevel);
    }

    private IEnumerable<string> GetSpellTypeOptions()
    {
        var values = Enum.GetValues(typeof(GeneratorEngine.EffectType)).Cast<EffectType>();
        return values.Select(v => v == EffectType.Penalty ? "Any" : v.ToString());
    }
}
