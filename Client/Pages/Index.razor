@page "/"

@using SpellGenerator.Client.Data
@inject DataTemplateService DataTemplateService

    <h1>Procedural Spell Generator</h1>
    <br>

    <EditForm EditContext="@EditContext">

        <div class="form-group">
            <label for="body">Spell type: </label>

            <InputSelect @bind-Value="@inputs.EffectType">

                @foreach (var etype in GetSpellTypeOptions())
                {
                    <option value="@etype">@etype</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="body">School: </label>

            <InputSelect @bind-Value="@inputs.SchoolOfMagic">

                @foreach (var school in Enum.GetValues(typeof(SchoolOfMagic)))
                {
                    <option value="@school">@school</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label for="body">Power Level: </label>

            <InputSelect @bind-Value="@inputs.PowerLevel">

                @foreach (var option in Enum.GetValues(typeof(PowerLevel)))
                {
                    <option value="@option">@option</option>
                }
            </InputSelect>
        </div>
    </EditForm>

    <br>
    <button @onclick="GenerateSpell">Create a new spell</button>
    <br>
    <br>
    <br>
    @if (theSpell != null)
    {
        <table>
            <tr>
                <td>Name</td>
                <td>@theSpell.Name</td>
            </tr>
            <tr>
                <td>School</td>
                <td>@theSpell.School</td>
            </tr>
            <tr>
                <td>Type</td>
                <td>@theSpell.Effect.Type</td>
            </tr>
            <tr>
                <td>Cast Time</td>
                <td>@theSpell.CastTime</td>
            </tr>
            @if (theSpell.Effect.Duration != Duration.Instant)
            {
                <tr>
                    <td>Duration</td>
                    <td>@theSpell.Effect.Duration</td>
                </tr>
                <tr>
                    <td>Concentration</td>
                    <td>@theSpell.RequiresConcentration</td>
                </tr>
            }
            <tr>
                <td>Ritual</td>
                <td>@theSpell.Ritual</td>
            </tr>
            <tr>
                <td>Delivery</td>
                <td>@theSpell.Delivery.Description</td>
            </tr>
            <tr>
                <td>Aesthetic</td>
                <td>@theSpell.Aesthetic.CombinedDescription()</td>
            </tr>
            <tr>
                <td>Effect</td>
                <td>@theSpell.Effect.Description</td>
            </tr>
            <br/>
            @if (theSpell.CasterPenaltyCost != null)
            {
                <tr>
                    <td>Side effect</td>
                    <td>@theSpell.CasterPenaltyCost.Description</td>
                </tr>
                <tr>
                    <td>S.E. Duration</td>
                    <td>@theSpell.CasterPenaltyCost.Duration</td>
                </tr>
            }
            <tr>
                <td>Components</td>
                <td>@theSpell.Components.SummarizeIncludingSpecificMaterials()</td>
            </tr>
            <tr>
                <td>Power Rating</td>
                <td>@theSpell.GetFinalPowerRating()</td>
            </tr>
        </table>
    }

    @code {
        private EditContext EditContext;
        private GeneratorEngine.Spell? theSpell;
        private InputsForSpell inputs = new InputsForSpell{ PowerLevel = PowerLevel.Random };

        protected override void OnInitialized()
        {
            EditContext = new EditContext(inputs);
            base.OnInitialized();
        }

        private void GenerateSpell()
        {
            bool typeExists = Enum.TryParse(inputs.EffectType, out EffectType spellType);
            EffectType? inputType = null;
            if (typeExists) inputType = spellType;

            theSpell = GeneratorEngine.Generators.SpellGenerator.CreateSpell(DataTemplateService, inputs.SchoolOfMagic, inputType, inputs.PowerLevel);
        }

        private IEnumerable<string> GetSpellTypeOptions()
        {
            var values = Enum.GetValues(typeof(GeneratorEngine.EffectType)).Cast<EffectType>();
            return values.Select(v => v == EffectType.Penalty ? "Any" : v.ToString());
        }
    }
