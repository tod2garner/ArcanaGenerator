@page "/counter"

@using SpellGenerator.Client.Data
@inject DataTemplateService DataTemplateService

<h1>Template Counter</h1>

<div class="flex-container">
    <div>Spell Type</div>
    <EditForm EditContext="@EditContext">
        <InputSelect @bind-Value="@effectType">

            @foreach (var etype in GetSpellTypeOptions())
            {
                <option value="@etype">@etype</option>
            }
        </InputSelect>
    </EditForm>
</div>

<br />
<br />

<div class="flex-container">    
    <svg width="320" height="250">
        <rect x="0" y="0" width="40" height="@ScaleForGraph(countAbjuration)" fill="yellow" stroke="black" />
        <rect x="40" y="0" width="40" height="@ScaleForGraph(countConjuration)" fill="orange" stroke="black" />
        <rect x="80" y="0" width="40" height="@ScaleForGraph(countDivination)" fill="blue" stroke="black" />
        <rect x="120" y="0" width="40" height="@ScaleForGraph(countEnchantment)" fill="pink" stroke="black" />
        <rect x="160" y="0" width="40" height="@ScaleForGraph(countEvocation)" fill="red" stroke="black" />
        <rect x="200" y="0" width="40" height="@ScaleForGraph(countIllusion)" fill="purple" stroke="black" />
        <rect x="240" y="0" width="40" height="@ScaleForGraph(countNecromancy)" fill="gray" stroke="black" />
        <rect x="280" y="0" width="40" height="@ScaleForGraph(countTransmutation)" fill="green" stroke="black" />
    </svg>
    <div class="grid-container">        
        <div>@countAbjuration</div>
        <div>Abjuration</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="yellow" stroke="black" />
            </svg>
        </div>

        <div>@countConjuration</div>
        <div>Conjuration</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="orange" stroke="black" />
            </svg>
        </div>

        <div>@countDivination</div>
        <div>Divination</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="blue" stroke="black" />
            </svg>
        </div>

        <div>@countEnchantment</div>
        <div>Enchantment</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="pink" stroke="black" />
            </svg>
        </div>
                
        <div>@countEvocation</div>
        <div>Evocation</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="red" stroke="black" />
            </svg>
        </div>
                
        <div>@countIllusion</div>
        <div>Illusion</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="purple" stroke="black" />
            </svg>
        </div>
                
        <div>@countNecromancy</div>
        <div>Necromancy</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="grey" stroke="black" />
            </svg>
        </div>
                
        <div>@countTransmutation</div>
        <div>Transmutation</div>
        <div>
            <svg width="10" height="10">
                <rect width="10" height="10" fill="green" stroke="black" />
            </svg>
        </div>
    </div>
</div>


@code {
    private EditContext EditContext;

    private GeneratorEngine.EffectType _effectType;
    public GeneratorEngine.EffectType effectType
    {
        get => _effectType;
        set
        {
            _effectType = value;
            UpdateCounts();
        }
    }

    private int maxValue = 0;
    private int countAbjuration = 0;
    private int countConjuration = 0;
    private int countDivination = 0;
    private int countEnchantment = 0;
    private int countEvocation = 0;
    private int countIllusion = 0;
    private int countNecromancy = 0;
    private int countTransmutation = 0;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(effectType);
        base.OnInitialized();
        effectType = EffectType.Damage;
        UpdateCounts();
    }

    private void UpdateCounts()
    {
        countAbjuration = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Abjuration);
        countConjuration = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Conjuration);
        countDivination = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Divination);
        countEnchantment = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Enchantment);
        countEvocation = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Evocation);
        countIllusion = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Illusion);
        countNecromancy = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Necromancy);
        countTransmutation = DataTemplateService.CountTemplates(effectType, SchoolOfMagic.Transmutation);
        maxValue = new List<int>{ countAbjuration, countConjuration, countDivination, countEnchantment, countEvocation, countIllusion, countNecromancy, countTransmutation }.Max();
    }

    private int ScaleForGraph(int count)
    {
        return (maxValue == 0) ? 0 : count * (250 / maxValue);
    }

    private IEnumerable<string> GetSpellTypeOptions()
    {
        var values = Enum.GetValues(typeof(GeneratorEngine.EffectType)).Cast<EffectType>().ToList();
        values.Remove(EffectType.Penalty);
        return values.Select(v => v.ToString());
    }
}
