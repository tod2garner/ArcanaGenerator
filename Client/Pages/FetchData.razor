@page "/fetchdata"

@inject Data.DataTemplateService TemplateService

<h1>Base Spell Templates</h1>

<p>A pre-set collection of templates is used to create original spells (except for pure damage spells, no templates are needed for those). This page allows you to view that collection.</p>

@if (templates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <br/>
    <p>@templates.Count templates were found.</p>
    <div class="grid-container">
        <div class="grid-item fw-bold">Type</div>
        <div class="grid-item fw-bold">Description</div>
        <div class="grid-item fw-bold">Schools</div>
        <div class="grid-item fw-bold">Base Power Rating</div>
        <div class="grid-item fw-bold">Always AOE</div>
        <div class="grid-item fw-bold">Never AOE</div>
        <div class="grid-item fw-bold">Always Instant</div>
        <div class="grid-item fw-bold">Min. Duration</div>
        <div class="grid-item fw-bold">Always Ranged</div>
        <div class="grid-item fw-bold">Range is Self</div>
        <div class="grid-item fw-bold">Always Reaction</div>
        <div class="grid-item fw-bold">Doesn't Target Creatures</div>
        <div class="grid-item fw-bold">Min. Cast Time</div>

        @foreach (var template in templates)
        {
            <div class="grid-item">@template.Type</div>
            <div class="grid-item">@template.Description</div>
            <div class="grid-item">@String.Join(Environment.NewLine, template.Schools.Select(s => s.ToString()))</div>
            <div class="grid-item text-center">@template.BaseValueScore</div>
            <div class="grid-item text-center">@BoolToChar(template.IsAlwaysAoE)</div>
            <div class="grid-item text-center">@BoolToChar(template.IsNeverAoE)</div>
            <div class="grid-item text-center">@BoolToChar(template.IsAlwaysInstant)</div>
            <div class="grid-item text-center">@template.MinimumDuration</div>
            <div class="grid-item text-center">@BoolToChar(template.IsAlwaysRanged)</div>
            <div class="grid-item text-center">@BoolToChar(template.IsRangeAlwaysSelf)</div>
            <div class="grid-item text-center">@BoolToChar(template.IsAlwaysAReaction)</div>
            <div class="grid-item text-center">@BoolToChar(template.DoesNotTargetCreatures)</div>
            <div class="grid-item text-center">@template.MinimumCastTime</div>
        }
    </div>
}

@code {
    private List<GeneratorEngine.Templates.SpellTemplate> templates;

    protected override async Task OnInitializedAsync()
    {
        templates = new List<GeneratorEngine.Templates.SpellTemplate>();
        templates.AddRange(await TemplateService.GetTemplatesAsync(EffectType.Buff, SchoolOfMagic.Any));
        templates.AddRange(await TemplateService.GetTemplatesAsync(EffectType.Debuff, SchoolOfMagic.Any));
        templates.AddRange(await TemplateService.GetTemplatesAsync(EffectType.Utility, SchoolOfMagic.Any));
    }

    private char BoolToChar(bool  value)
    {
        return value ? 'T' : '-';
    }
}
